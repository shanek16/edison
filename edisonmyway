from direction_choice import *
#from area_choice import *
from marker_recognition import *
from stop_detection import *
import time
import cv2
import numpy as np
import linecache
import sys
from picamera import PiCamera
from picamera.array import PiRGBArray

camera=PiCamera()
duty=50
t_duty=30

def driver(motor):

    result=(0,0)
    pre_result=(0,0)
	###############camera setting#####################
    camera.resolution=(320,240)
    camera.vflip=True
    camera.hflip=True
    camera.framerate=20
    rawCapture=PiRGBArray(camera,size=(320,240))
    time.sleep(.1)

	#########result saving in text file ####################
    """
    n=0
    resultfile=open(r'./resulttext.txt','w')
    """

    for frame in camera.capture_continuous(rawCapture,format='bgr',use_video_port=True): 
        image=frame.array
        rawCapture.truncate(0)  
        #######code part##################################################
        pi_image=cv2.inRange(image,np.array((140,140,140)),np.array((255,255,255)))#image.shape(320,240) original thresh hold 140  
        # 255 255 255 white 0 0 0 black/ this value close to 255 makes world darker

        obj = cv2.CascadeClassifier('stopsign.xml')
        mode=detect(image,obj)
        ################command motor to stop if mode=stop#########
        if mode>2:
            GPIO.output(chlist[:2],(GPIO.HIGH,GPIO.HIGH))
            print('motor stopped\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n')
        #######################direction choice#################
        result=direction_choice(pi_image,duty,motor,pre_result)#area_choice or direction_choice for direction_choice parameter=(image,duty,motor,pre_result)
        result,marker=marker_recognition(pi_image,image,result,duty,motor)#upadate result
        #result,marker=marker_detect_cascade(image_marker,duty,result)
        pre_result=result

        ######result print#############################################
        # print(result)
        if result==(duty,duty): 
            direction='forward'
        elif result==(-t_duty,t_duty): 
            direction='left'
        elif result==(t_duty,-t_duty):
            direction='right'
        elif result==(-t_duty,-t_duty):
            direction='backward'
        else: direction='forward'

        # print('dir={0}'.format(direction))
        ##################################################################3
    
        motor(result[0],result[1])
        
        #####################################################
        #while(start+0.1>time.time()):
        #    pass
        ############################################################
        ###########show image with text#####################
        cv2.putText(image,'{0}'.format(direction),(190,30),cv2.FONT_HERSHEY_SIMPLEX,1,(130,130,130),2)
        cv2.imshow('image',image)
        cv2.imshow('pi_image',pi_image)
        key=cv2.waitKey(1)
        ############################################
    
        ############save image and data###########################
        """
        cv2.imwrite(r'./image/testimage'+str(n)+'.jpg',image)
        resultfile.write('m={0:0.4f}, forward={1}, dir={2}'.format(m,forward,direction)+'/n')
        n=n+1
        """
        #########################################################
        if key == ord('q'):  
            break
        
    cv2.destroyAllWindows()
    #resultfile.close()
